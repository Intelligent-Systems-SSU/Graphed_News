/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: NewsSummary.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf';
import * as grpc_1 from '@grpc/grpc-js';
export class NewsSummaryParams extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          url: string;
        }
  ) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == 'object') {
      this.url = data.url;
    }
  }
  get url() {
    return pb_1.Message.getField(this, 1) as string;
  }
  set url(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get has_url() {
    return pb_1.Message.getField(this, 1) != null;
  }
  static fromObject(data: { url?: string }): NewsSummaryParams {
    const message = new NewsSummaryParams({
      url: data.url,
    });
    return message;
  }
  toObject() {
    const data: {
      url?: string;
    } = {};
    if (this.url != null) {
      data.url = this.url;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.has_url && this.url.length) writer.writeString(1, this.url);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewsSummaryParams {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new NewsSummaryParams();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.url = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): NewsSummaryParams {
    return NewsSummaryParams.deserialize(bytes);
  }
}
export class NewsSummaryResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          summary: string;
        }
  ) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == 'object') {
      this.summary = data.summary;
    }
  }
  get summary() {
    return pb_1.Message.getField(this, 1) as string;
  }
  set summary(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get has_summary() {
    return pb_1.Message.getField(this, 1) != null;
  }
  static fromObject(data: { summary?: string }): NewsSummaryResponse {
    const message = new NewsSummaryResponse({
      summary: data.summary,
    });
    return message;
  }
  toObject() {
    const data: {
      summary?: string;
    } = {};
    if (this.summary != null) {
      data.summary = this.summary;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.has_summary && this.summary.length) writer.writeString(1, this.summary);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewsSummaryResponse {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new NewsSummaryResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.summary = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): NewsSummaryResponse {
    return NewsSummaryResponse.deserialize(bytes);
  }
}
interface GrpcUnaryServiceInterface<P, R> {
  (
    message: P,
    metadata: grpc_1.Metadata,
    options: grpc_1.CallOptions,
    callback: grpc_1.requestCallback<R>
  ): grpc_1.ClientUnaryCall;
  (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
  (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
  (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
  (
    metadata: grpc_1.Metadata,
    options: grpc_1.CallOptions,
    callback: grpc_1.requestCallback<R>
  ): grpc_1.ClientWritableStream<P>;
  (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
  (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
  (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
  (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
  (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedNewsSummaryService {
  static definition = {
    get: {
      path: '/NewsSummary/get',
      requestStream: false,
      responseStream: false,
      requestSerialize: (message: NewsSummaryParams) => Buffer.from(message.serialize()),
      requestDeserialize: (bytes: Buffer) => NewsSummaryParams.deserialize(new Uint8Array(bytes)),
      responseSerialize: (message: NewsSummaryResponse) => Buffer.from(message.serialize()),
      responseDeserialize: (bytes: Buffer) => NewsSummaryResponse.deserialize(new Uint8Array(bytes)),
    },
  };
  [method: string]: grpc_1.UntypedHandleCall;
  abstract get(
    call: grpc_1.ServerUnaryCall<NewsSummaryParams, NewsSummaryResponse>,
    callback: grpc_1.sendUnaryData<NewsSummaryResponse>
  ): void;
}
export class NewsSummaryClient extends grpc_1.makeGenericClientConstructor(
  UnimplementedNewsSummaryService.definition,
  'NewsSummary',
  {}
) {
  constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
    super(address, credentials, options);
  }
  get: GrpcUnaryServiceInterface<NewsSummaryParams, NewsSummaryResponse> = (
    message: NewsSummaryParams,
    metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NewsSummaryResponse>,
    options?: grpc_1.CallOptions | grpc_1.requestCallback<NewsSummaryResponse>,
    callback?: grpc_1.requestCallback<NewsSummaryResponse>
  ): grpc_1.ClientUnaryCall => {
    return super.get(message, metadata, options, callback);
  };
}
